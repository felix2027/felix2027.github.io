{
    "version": "https://jsonfeed.org/version/1",
    "title": "梁峯",
    "subtitle": "",
    "icon": "https://blog.onlydoit.fun/images/favicon.ico",
    "description": "Welcome to Felix's blog",
    "home_page_url": "https://blog.onlydoit.fun",
    "items": [
        {
            "id": "https://blog.onlydoit.fun/2024/08/10/Introduction-to-data-structures/",
            "url": "https://blog.onlydoit.fun/2024/08/10/Introduction-to-data-structures/",
            "title": "数据结构绪论",
            "date_published": "2024-08-10T07:33:25.000Z",
            "content_html": "<h2 id=\"数据结构绪论\"><a class=\"anchor\" href=\"#数据结构绪论\">#</a> 数据结构绪论</h2>\n<h3 id=\"数据结构概述\"><a class=\"anchor\" href=\"#数据结构概述\">#</a> 数据结构概述</h3>\n<p><strong>数据结构（D,R）</strong>，<strong>就是指数据元素之间的关系</strong>。</p>\n<ul>\n<li><strong>D</strong>（Data）数据元素集合</li>\n<li><strong>R</strong>（Relation）数据元素之间的关系的集合</li>\n</ul>\n<blockquote>\n<p>e.g.</p>\n<p>数据结构被形式地定义为 (D, R)，其中 D 是数据元素的有限集合，R 是 D 上的关系有限集合。</p>\n</blockquote>\n<p><strong>数据结构</strong>就是指<strong>指数据元素之间的关系</strong>。</p>\n<ul>\n<li>\n<p>基本概念和术语</p>\n<ol>\n<li>数据（Data）：<strong>数据</strong>是客观事物的符号表示，在计算机科学中是指所有能<strong>输入</strong>到计算机中并<strong>被计算机程序识别和处理的符号的总称</strong>。</li>\n<li>数据对象（Data Object）：是<strong>性质相同的数据元素的集合</strong>，是数据的一个子集</li>\n<li>数据元素（Data Element）：是数据的<strong>基本单位</strong>，在计算机程序中通常作为一个整体进行考虑和处理。<strong>一个数据元素可以由若干个数据项组成</strong>。一个存储结点存储一个数据元素</li>\n<li>数据项（Data Item）：是数据处理中的<strong>最小单位</strong></li>\n<li>结构 (Structure)：数据元素之间的关系。</li>\n<li>数据结构 (Data Structure)：相互之间存在一种或多种特定关系的数据元素的集合。</li>\n</ol>\n<blockquote>\n<p>数据：对客观事物的符号表示。在计算机科学中是指所有能输入到计算机并被计算机处理的符号总称。</p>\n<p>数据元素：数据的基本单位。数据项的集合。数据的子集</p>\n<p>数据结构：相互之间的存在一种或多种特定关系的数据元素的集合</p>\n</blockquote>\n</li>\n<li>\n<p>抽象数据类型</p>\n<p>（Abstract Data Type，ADT）是抽象数据组织及与之相关的操作。用数学化的语言定义数据的逻辑结构、定义运算与具体的实现无关。</p>\n<ol>\n<li>\n<p>数据类型：常用数据类型包括<strong>基本数据类型</strong>和<strong>构造数据类型</strong>。</p>\n</li>\n<li>\n<p>抽象数据类型：（D，S，P）：</p>\n<ul>\n<li>D：数据对象</li>\n<li>S：D 上的关系集</li>\n<li>P：对 D 的基本操作集（增删改查）</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ADT 抽象数据类型名&#123;</span><br><span class=\"line\">    数据对象:&lt;数据对象的含义&gt;</span><br><span class=\"line\">    数据关系:&lt;数据关系的定义&gt;</span><br><span class=\"line\">    基本操作:&lt;基本操作的含义&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>e.g.<br>\n 抽象数据类型的定义仅取决于它的一组<strong>逻辑特征</strong>，而与计算机内部如何表示和实现<strong>无关</strong>，即不论其内部结构如何变化，只要它的<strong>数学特征</strong>不变，都不影响其外部使用。</p>\n</blockquote>\n</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"数据结构\"><a class=\"anchor\" href=\"#数据结构\">#</a> 数据结构</h4>\n<p>数据结构是相互之间存在<strong>一种或多种特定关系的数据元素的集合</strong>。在任何问题中，数据元素都不是孤立存在的，而是在它们之间存在着某种关系，这种数据元素相互之间的关系称为结构（structure）。</p>\n<blockquote>\n<p>e.g.</p>\n<p>数据结构是一门研究非数值运算的程序设计问题中计算机的<strong>数据</strong>以及它们之间的<strong>关系</strong>和运算等的学科。</p>\n</blockquote>\n<p>数据结构一般包括以下三方面内容。</p>\n<ol>\n<li>\n<p>逻辑结构：</p>\n<p>数据的逻辑结构是对数据元素之间逻辑关系的描述。它与<strong>数据的存储无关</strong>，是独立于计算机的。同一逻辑结构可以有多种结构存储，主要分为两类：<strong>线性结构和非线性结构</strong>。其中集合、树、图属于非线型结构。</p>\n<blockquote>\n<p>e.g.</p>\n<p>同一种数据的逻辑结构，可以对应多种的不同<strong>存储结构</strong>。</p>\n</blockquote>\n<ul>\n<li>\n<p>集合：元素之间无关系。</p>\n<p>结构中的数据元素之间除了 “同属一个集合 “外，别无其它的关系。</p>\n</li>\n<li>\n<p><strong>线性</strong>：元素之间一对一的关系。</p>\n<p>结构中的数据元素之间存在着一个对一个的关系，除了第一个元素，所有的元素都有唯一前驱；除了最后一个元素，所有元素都有唯一后继。</p>\n<blockquote>\n<p>e.g.</p>\n<p>线性结构除了首尾结点外，其它节点只有一个<strong>前驱结点</strong>和一个<strong>后继结点</strong>。</p>\n<p>e.g.</p>\n<p>一种数据结构的元素集合 K 和它的二元关系为：k={a,b,c,d,e,f,g,h},R={&lt;a,b&gt;,&lt;b,c&gt;,&lt;c,d&gt;,&lt;d,e&gt;,&lt;e,f&gt;,&lt;f,g&gt;,&lt;g,h&gt;} 则该数据结构具有<strong>线性</strong>结构</p>\n<p>e.g.</p>\n<p>在线性结构中，第一个结点<strong>没有</strong>前驱结点，其余每个结点有且只有<strong> 1 个</strong>前驱结点；最后一个结点<strong>没有</strong>后续结点，其余每个结点有且只有<strong> 1 个</strong>后续结点。</p>\n</blockquote>\n</li>\n<li>\n<p>树形：元素之间一对多的关系。</p>\n<p>结构中的数据元素之间存在着一个对多个的关系</p>\n<blockquote>\n<p>e.g.</p>\n<p>一种数据结构的元素集合 K 和它的二元关系为：k={a,b,c,d,e,f,g,h},R={&lt;d,b&gt;,&lt;d,g&gt;,&lt;b,a&gt;,&lt;b,c&gt;,&lt;g,e&gt;,&lt;g,h&gt;,&lt;e,f&gt;} 则该数据结构具有<strong>树型</strong>结构。</p>\n</blockquote>\n</li>\n<li>\n<p>图形：元素之间多对多的关系。</p>\n<p>结构中的数据之间存在着多个对多个的关系</p>\n</li>\n</ul>\n</li>\n<li>\n<p>物理结构（存储结构）：两种常用存储结构</p>\n<p>常用的存储结构有两种：</p>\n<ul>\n<li><strong>顺序存储</strong>：逻辑相邻的元素在物理上<strong>也相邻</strong></li>\n<li><strong>链式存储</strong>：逻辑相邻的元素在物理上<strong>不一定相邻</strong></li>\n</ul>\n<p>另外还有：</p>\n<ul>\n<li>索引存储：在存储元素信息的同时，建立附加的索引表。用结点的索引号来确定节点存储地址。优点是检索速度快，缺点是增加了额外的索引表，会占用较多的存储空间</li>\n<li>散列存储：根据元素的关键字直接计算出该元素的存储地址，又称哈希（Hash）存储。根据结点的值确定它的存储地址。优点是检索、增加和删除节点的操作都很快。缺点是采用不好的散列函数时可能出现结点存储单元冲突，为解决冲突需要额外的时间和空间开销。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>顺序存储</th>\n<th>链式存储</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>优点</td>\n<td>1. 可以实现随机存取<br />2. 每个元素占用最少的空间</td>\n<td>充分利用所有存储单元，不会出现碎片现象</td>\n</tr>\n<tr>\n<td>缺点</td>\n<td>只能使用整块的存储单元，会产生较多的碎片</td>\n<td>1. 需要额外存储空间用来放下一结点的指针。<br />2. 只能顺序存储。</td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li>若采用顺序存储，则各个数据元素在物理上必须是连续的；若采用非顺序存储，则各个元素在物理上可以是离散的。</li>\n<li>数据的存储结构会影响存储空间分配的便利性。</li>\n<li>数据的存储结构会影响数据运算的速度。</li>\n</ol>\n</li>\n<li>\n<p>数据的运算：</p>\n<blockquote>\n<p><strong>运算在逻辑结构</strong></p>\n<p><strong>实现在存储结构</strong></p>\n<p>施加在数据上的运算包括运算的定义和实现。<strong>运算的定义</strong>是针对<strong>逻辑结构</strong>的，指出运算的功能；<strong>运算的实现</strong>是针对<strong>存储结构</strong>的，指出运算的具体操作步骤。</p>\n</blockquote>\n<p>数据的运算即对数据施加的操作。数据的运算<strong>定义在数据的逻辑结构</strong>上，但是只有<strong>确定了存储结构</strong>，才能具体实现这些运算。数据的运算通常包括以下 5 个操作：</p>\n<ul>\n<li>插入：在指定位置上添加一个新结点。</li>\n<li>删除：删去指定位置上的节点。</li>\n<li>更新：修改某结点的值</li>\n<li>查找：寻找满足指定条件的结点及其位置</li>\n<li>排序：按指定的顺序使结点重新排列</li>\n</ul>\n</li>\n<li>\n<p>数据类型</p>\n<p>数据类型是一个值的集合和定义在此集合上的一组操作的总称</p>\n<ol>\n<li><strong>原子类型</strong>：其值不可再分的数据类型，如  <code>bool</code> 、 <code>int</code> 。</li>\n<li><strong>结构类型</strong>：其值可以再分解为若干成分（分量）的数据类型，如  <code>struct student</code> 。</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"算法及其复杂性概述\"><a class=\"anchor\" href=\"#算法及其复杂性概述\">#</a> 算法及其复杂性概述</h3>\n<blockquote>\n<p><strong>程序 = 数据结构 + 算法</strong></p>\n<p>算法 是<strong>对特定问题求解步骤的一种描述</strong>，是指令的有限序列。其中每一条指令表示一个或多个操作。</p>\n</blockquote>\n<h4 id=\"算法\"><a class=\"anchor\" href=\"#算法\">#</a> 算法</h4>\n<h5 id=\"算法的五个特性\"><a class=\"anchor\" href=\"#算法的五个特性\">#</a> 算法的五个特性</h5>\n<ol>\n<li><strong>输入：0 个或多个输入</strong></li>\n<li><strong>输出：1 个或多个输出</strong></li>\n<li><strong>确定性</strong>：<strong>每一条指令必须有确切的含义，没有二义性</strong>，即对于相同的输入只能得出相同的输出。</li>\n<li><strong>有穷性：算法中描述的操作都是可以通过已实现的基本运算执行有限次来实现的。</strong></li>\n<li><strong>可行性：一个算法描述的操作是可行的。</strong></li>\n</ol>\n<h5 id=\"算法的四个要求\"><a class=\"anchor\" href=\"#算法的四个要求\">#</a> 算法的四个要求</h5>\n<ol>\n<li><strong>正确性</strong>：算法应满足具体问题需求，设计或选择的算法应能正确反映这种需求。</li>\n<li><strong>健壮性</strong>：当输入数据非法时，算法也能适当地作出反应或处理，而不会产生莫名其妙的输出结果。</li>\n<li><strong>可读性</strong>：算法主要是为了人阅读及人与人之间的交流，其次才是机器执行。可读性好有助于对算法的理解。晦涩难懂的程序易于隐藏错误，难以调试和修改。</li>\n<li><strong>高效率低存储</strong>：效率指的是算法执行时间。若有多个算法可解决同一问题，则执行时间短的算法效率高。存储需求指的是执行过程所需的最大存储空间。</li>\n</ol>\n<h5 id=\"算法复杂性的概念\"><a class=\"anchor\" href=\"#算法复杂性的概念\">#</a> 算法复杂性的概念</h5>\n<blockquote>\n<p>评价一个程序优劣的重要依据是看该程序的执行需要占用多少机器资源。在各种机器资源中，最重要的是<strong>时间</strong>资源和<strong>空间</strong>资源。</p>\n<p>因此，在进行程序分析时，大家最关心的就是程序所用算法在运行时所要花费的时间代价和程序中使用的数据结构所占有的空间代价。通常称之为<strong>时间复杂度（时间代价）<strong>和</strong>空间复杂度（空间代价）</strong>。</p>\n<p>算法执行时间需要通过依据该算法编制的程序在计算机上运行时所消耗的时间来度量。</p>\n</blockquote>\n<blockquote>\n<p>e.g.</p>\n<p>一个算法的效率可分为<strong>时间</strong>效率和<strong>空间</strong>效率</p>\n</blockquote>\n<h4 id=\"算法的时间复杂度\"><a class=\"anchor\" href=\"#算法的时间复杂度\">#</a> 算法的时间复杂度</h4>\n<blockquote>\n<p>时间复杂度是指算法中所有语句的频度（执行次数）之和。</p>\n<p>在一般情况下，算法中 “基本操作” 重复执行的次数是问题规模 n 的某个函数 f (n)，算法的时间度量记作： <code>T(n) = O(f(n))</code> ，它表示随<strong>问题规模 n</strong> 的增大，算法执行时间的增长率和 f (n) 的增长率相同。</p>\n<p>时间复杂度（T (n)）取决于基本操作的执行次数，也叫频度。基本操作的频度用 T (n) 表示。</p>\n<p>由于算法时间复杂度分析只考虑相对于问题规模 n 的增长率，因而在难以精确计算基本操作执行次数的情况下，只要求出它关于 n 的增长率即可。我们可以在计算任何算法运行时间代价的时候，<strong>忽略所有的常数和低次项，用大 O 表示法来表示算法的时间复杂度</strong></p>\n<p>先分析基本操作的频度，然后取数量级，数量级最高的频度决定了时间复杂度的数量级。</p>\n</blockquote>\n<blockquote>\n<p>e.g. 下述程序段中语句 <code>s+=j;</code>  的频度是？</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;j&lt;m;i++)</span><br><span class=\"line\"><span class=\"keyword\">for</span>(j=<span class=\"number\">0</span>;j&lt;=i;j++)</span><br><span class=\"line\">s+=j;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">根据高斯公式：&amp;a+…+b=(a+b)(b-a+1)/2&amp;\\\\</span><br><span class=\"line\">&amp;2+3+4+...+m=(m+2)(m-1)/2&amp;\\\\</span><br><span class=\"line\">答案为：&amp;(m+2)(m-1)/2&amp;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>时间复杂度的推导过程</p>\n<ol>\n<li>\n<p>分析基本操作的频度</p>\n</li>\n<li>\n<p>取数量级</p>\n</li>\n<li>\n<p>数量级最高的频度决定了时间复杂度的数量级</p>\n<p>常用技巧</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;加法:&amp;O(f(n))+O(g(n))=O(max(f(n),g(n)))\\\\</span><br><span class=\"line\">&amp;乘法:&amp;O(f(n)*O(g(n)))=O(f(n)*g(n))</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>常数阶</p>\n<blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1+1+1&amp;=&amp;3\t//求运行次数之和 \\\\</span><br><span class=\"line\">1&amp;=&amp;n^0\t//用1取代所有加法常数\\\\</span><br><span class=\"line\">T(n)&amp;=&amp;n^0\t//保留最高阶项</span><br></pre></td></tr></table></figure>\n<p>T(n)=O(f(n))=O(1)</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> sum = <span class=\"number\">0</span>,n=<span class=\"number\">100</span>;</span><br><span class=\"line\">sum=(<span class=\"number\">1</span>+n)*n/<span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,sum);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>线性阶</p>\n<blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">分析基本操作的频度，然后取数量级 &amp;T(n)=O(1)+O(n)&amp;\\\\</span><br><span class=\"line\">化简&amp;T(n)=O(n)&amp;\\\\</span><br></pre></td></tr></table></figure>\n<p>T(n)=O(f(n))=O(n)</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> i;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//代码块内O(1)的步骤</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>对数阶</p>\n<blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">分析基本操作的频度 &amp;2^t+1^\\frac&#123;n&#125;&#123;2&#125;&amp;\\\\</span><br><span class=\"line\">取数量级 &amp;T(n)=O(\\log_&#123;2&#125;^\\frac&#123;n&#125;&#123;2&#125;-1)+O(1)&amp;\\\\</span><br><span class=\"line\">化简&amp;T(n)=O(f(n))=O(\\log_2^n)&amp;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> x=<span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(x&lt;n/<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">    x=<span class=\"number\">2</span>*x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li></li>\n</ul>\n<blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nlog_2^n</span><br></pre></td></tr></table></figure>\n<p>外层 n，内层 log<sub>2</sub>n</p>\n</blockquote>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> i,x=<span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x&lt;n/<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        x=<span class=\"number\">2</span>*x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>平方阶</p>\n<blockquote>\n<p>n*n+1\t// 求运行次数之和<br>\n n<sup>2</sup>+n<sup>0</sup>\t// 用 1 取代所有加法常数<br>\n n<sup>2</sup>\t// 保留最高阶<br>\n T (n)=O (f (n))=O (n<sup>2</sup>)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n*n+1\t\\\\</span><br><span class=\"line\">n^2+n^0\t\\\\</span><br><span class=\"line\">n^2\\\\\t</span><br><span class=\"line\">T(n)=O(f(n))=O(n^2)</span><br></pre></td></tr></table></figure>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> i,j;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(j=<span class=\"number\">0</span>;j&lt;n;j++)&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<p>常见的时间复杂度比较</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">执行次数函数  &amp;O阶&amp;       非正式用语\\\\</span><br><span class=\"line\">12                 &amp;O(1)&amp;         常数阶\\\\</span><br><span class=\"line\">2n+3               &amp;O(n)&amp;         线性阶\\\\ </span><br><span class=\"line\">3n^2+2n+1         &amp;O(n^2)&amp;       平方阶\\\\  </span><br><span class=\"line\">5log_2^n+20      &amp;O(log_2^n)&amp;  对数阶\\\\  </span><br><span class=\"line\">2n+3nlog_2^n+19  &amp;O(nlog_2^n)&amp;  nlogn阶\\\\    </span><br><span class=\"line\">6n^3+2n^2+3n+4   &amp;O(n^3)&amp;      立方阶\\\\</span><br><span class=\"line\">2^n             &amp;O(2^n)&amp;      指数阶 \\\\</span><br></pre></td></tr></table></figure>\n<p>常用的时间复杂度所消耗的时间从小到大依次是：</p>\n<p><strong>常对幂指阶</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">O(1)&lt;O(logn)&lt;O(n)&lt;O(nlogn)&lt;O(n^2)&lt;O(n^3)&lt;O(2^n)&lt;O(n!)&lt;O(n^n)</span><br></pre></td></tr></table></figure>\n<p>最坏情况与平均情况</p>\n<blockquote>\n<p>对算法的分析，一种方法是计算所有情况的平均值，这种时间复杂度的计算方法称为<strong>平均</strong>时间复杂度。另一种方法是计算最坏情况下的时间复杂度，这种方法称为<strong>最坏</strong>时间复杂度。一般在没有特殊说明的情况下，都是指最坏时间复杂度</p>\n</blockquote>\n<blockquote>\n<p>e.g.</p>\n<p>分析下面算法，给出最大语句频度<strong> n (n-1)/2</strong>, 该算法的二时间复杂度是<strong> O (n^2)</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(j=<span class=\"number\">0</span>;j&lt;i;j++)&#123;</span><br><span class=\"line\">  a[i][j]=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h4 id=\"算法的空间复杂度\"><a class=\"anchor\" href=\"#算法的空间复杂度\">#</a> 算法的空间复杂度</h4>\n<blockquote>\n<p>算法的空间复杂度通过计算算法所需存储空间实现，算法空间复杂度的计算公式基座：S (n)=O (f (n)), 表示随着问题规模 n 的增大，算法运行所需存储量的增长与 f (n）的增长率</p>\n<p>算法的存储量包括：</p>\n<p>​    输入程序所占<strong>空间</strong></p>\n<p>​    程序本身所占<strong>空间</strong></p>\n<p>​    辅助变量所占<strong>空间</strong></p>\n<p>S(n)=O(f(n))</p>\n<p>若输入数据所占空间只取决与问题本身，和算法无关，则只需要分析出输入和程序之外的额外空间。</p>\n<p>算法原地工作指的是额外空间相对于输入数据量来说是常数。</p>\n<p>n 个元素数组排序，不使用额外的空间（随着 n 的增长而增长的空间叫额外空间），空间复杂度就是 O (1)。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RevArray(<span class=\"type\">int</span> a[],<span class=\"type\">int</span> n)&#123;</span><br><span class=\"line\"> <span class=\"type\">int</span> i,j;</span><br><span class=\"line\"> <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>,j=n<span class=\"number\">-1</span>;i&lt;j;i++,j--)&#123;</span><br><span class=\"line\">     a[i]+=a[j];</span><br><span class=\"line\">     a[j]=a[i]-a[j];</span><br><span class=\"line\">     a[i]-=a[j];</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t执行了n/2次</span></span><br><span class=\"line\"><span class=\"comment\">\t所以T(n)=n/2=O(n)</span></span><br><span class=\"line\"><span class=\"comment\">\t辅助空间只有i,j,所以S(n)=2=O(1)</span></span><br><span class=\"line\"><span class=\"comment\">\t而因为这里使用的辅助空间，不会随着问题的规模变化而变化，简而言之，就是常量级别的，我们就称其为原地工作</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>空间复杂度 S (n) 定义为该算法所耗费的存储空间，它是问题规模 n 的函数。</p>\n<p>计算公式： <code>S(n) = O(f(n))</code> 。</p>\n<p>空间复杂度的主要关注点是<strong>辅助空间</strong>，即算法所需的额外空间（除了输入数据的存储空间外）。</p>\n<ul>\n<li>空间复杂度不包括输入和输出所需的空间。</li>\n<li>主要衡量算法的辅助空间。</li>\n</ul>\n<p>无论问题规模怎么变，算法运行所需的内存空间都是固定的常量。</p>\n<ul>\n<li>\n<p>普通程序</p>\n<ol>\n<li>找到所占空间大小与问题规模相关的变量</li>\n<li>分析所占空间 x 与问题规模 n 的关系 x=f (n)</li>\n<li>x 的数量级 O (x) 就是算法空间复杂度 S (n)</li>\n</ol>\n</li>\n<li>\n<p>递归程序</p>\n<ol>\n<li>找到递归调用的深度 x 与问题规模 n 的关系 x=f (n)</li>\n<li>x 的数量级 O (x) 就是算法空间复杂度 S (n)</li>\n</ol>\n<p>注：有的算法各层函数所需存储空间不同，分析方法略有不同</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">S(O)=O(n^2)+O(n)+n(1)=O(n^2)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">test</span><span class=\"params\">(<span class=\"type\">int</span> n)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> flag[n][n];</span><br><span class=\"line\">    <span class=\"type\">int</span> other[n];</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\">    <span class=\"comment\">//S(O)=O(n^2)+O(n)+n(1)=O(n^2)</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">S(O)=O(n)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">test</span><span class=\"params\">(<span class=\"type\">int</span> n)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n&gt;<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        test(--n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//S(O)=O(n)</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">S(O)=O(n^2)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void test(int n)&#123;</span><br><span class=\"line\">    int flag[4]=&#123;0&#125;;</span><br><span class=\"line\">    if(n&gt;1)&#123;</span><br><span class=\"line\">        test(--n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //S(O)=O(n^2)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "数据结构",
                "教程"
            ]
        },
        {
            "id": "https://blog.onlydoit.fun/2024/08/05/create-new-blog-with-hexo/",
            "url": "https://blog.onlydoit.fun/2024/08/05/create-new-blog-with-hexo/",
            "title": "使用 Hexo 发布文章",
            "date_published": "2024-08-05T00:00:00.000Z",
            "content_html": "<h1 id=\"使用-hexo-发布文章\"><a class=\"anchor\" href=\"#使用-hexo-发布文章\">#</a> 使用 Hexo 发布文章</h1>\n<h2 id=\"新建文章\"><a class=\"anchor\" href=\"#新建文章\">#</a> 新建文章</h2>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 新建文章，layout 为 scaffold/ 下创建的模板，默认的有 draft|paper|post 对应 草稿|页面|文章</span></span><br><span class=\"line\">hexo new [layout] title       <span class=\"comment\"># 或 hexo n [layout] title</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"草稿管理\"><a class=\"anchor\" href=\"#草稿管理\">#</a> 草稿管理</h2>\n<h3 id=\"新建草稿\"><a class=\"anchor\" href=\"#新建草稿\">#</a> 新建草稿</h3>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 新建草稿</span></span><br><span class=\"line\"><span class=\"comment\"># 草稿会保存在 source/_drafts 目录中</span></span><br><span class=\"line\">hexo new draft &lt;title&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看草稿\"><a class=\"anchor\" href=\"#查看草稿\">#</a> 查看草稿</h3>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动本地服务器查看草稿</span></span><br><span class=\"line\">hexo s --draft  <span class=\"comment\"># 或者 hexo server --draft</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"发布草稿\"><a class=\"anchor\" href=\"#发布草稿\">#</a> 发布草稿</h3>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将草稿发布为正式文章</span></span><br><span class=\"line\"><span class=\"comment\"># 草稿会从 source/_drafts 移动到 source/_posts 中</span></span><br><span class=\"line\">hexo publish &lt;title&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"示例\"><a class=\"anchor\" href=\"#示例\">#</a> 示例</h3>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 新建一篇标题为 &quot;待发布文章&quot; 的草稿</span></span><br><span class=\"line\">hexo new draft <span class=\"string\">&quot;待发布文章&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看草稿</span></span><br><span class=\"line\">hexo s --draft</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 &quot;待发布文章&quot; 草稿发布为正式文章</span></span><br><span class=\"line\">hexo publish <span class=\"string\">&quot;待发布文章&quot;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"文章模板\"><a class=\"anchor\" href=\"#文章模板\">#</a> 文章模板</h2>\n<p>默认新建的文章中，Front-matter 中的内容很少，可以在 scaffold 中修改模板，之后新建文章时再修改会方便些。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># scaffold/post.md</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> &#123;&#123; <span class=\"string\">title</span> &#125;&#125;</span><br><span class=\"line\"><span class=\"attr\">date:</span> &#123;&#123; <span class=\"string\">date</span> &#125;&#125;</span><br><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">Felix</span></span><br><span class=\"line\"><span class=\"comment\"># 布局 post|page|draft 文章|页面|草稿</span></span><br><span class=\"line\"><span class=\"attr\">layout:</span> <span class=\"string\">post</span></span><br><span class=\"line\"><span class=\"comment\"># 更新日期</span></span><br><span class=\"line\"><span class=\"attr\">updated:</span></span><br><span class=\"line\"><span class=\"comment\"># 开启文章的评论功能</span></span><br><span class=\"line\"><span class=\"attr\">comments:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 标签</span></span><br><span class=\"line\"><span class=\"attr\">tags:</span></span><br><span class=\"line\"><span class=\"comment\">#  - </span></span><br><span class=\"line\"><span class=\"comment\">#  - </span></span><br><span class=\"line\"><span class=\"comment\"># 分类</span></span><br><span class=\"line\"><span class=\"attr\">categories:</span>  </span><br><span class=\"line\"><span class=\"comment\">#  - </span></span><br><span class=\"line\"><span class=\"comment\">#  - </span></span><br><span class=\"line\"><span class=\"comment\"># 简述 正文内容均会被隐藏</span></span><br><span class=\"line\"><span class=\"attr\">description:</span></span><br><span class=\"line\"><span class=\"comment\"># 使用自定义封面 </span></span><br><span class=\"line\"><span class=\"attr\">img:</span> </span><br><span class=\"line\"><span class=\"comment\"># 是否置顶 true，或者去掉</span></span><br><span class=\"line\"><span class=\"attr\">top:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 封面</span></span><br><span class=\"line\"><span class=\"comment\"># cover:</span></span><br><span class=\"line\"><span class=\"comment\">#是否对文件加密\t需要下载hexo-blog-encrypt才能实现加密，添加密码视为启用加密</span></span><br><span class=\"line\"><span class=\"attr\">password:</span> </span><br><span class=\"line\"><span class=\"attr\">abstract:</span> <span class=\"string\">&#x27;这是一篇加密文章，需要密码才能继续阅读。&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">message:</span> <span class=\"string\">&#x27;当前文章暂不对外可见，请输入密码后查看！&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">wrong_pass_message:</span> <span class=\"string\">&#x27;抱歉，您输入的密码错误，请检查后重新输入。&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">wrong_hash_message:</span> <span class=\"string\">&#x27;抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"示例-2\"><a class=\"anchor\" href=\"#示例-2\">#</a> 示例</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">我的第一篇文章</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2024-08-05 10:00:00</span></span><br><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">Felix</span></span><br><span class=\"line\"><span class=\"attr\">layout:</span> <span class=\"string\">post</span></span><br><span class=\"line\"><span class=\"attr\">comments:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">tags:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">Hexo</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">博客</span></span><br><span class=\"line\"><span class=\"attr\">categories:</span>  </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">技术</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">博客搭建</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">这是一篇关于如何使用</span> <span class=\"string\">Hexo</span> <span class=\"string\">发布文章的示例。</span></span><br><span class=\"line\"><span class=\"attr\">top:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">img:</span> <span class=\"string\">/images/hexo-cover.jpg</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"分类\"><a class=\"anchor\" href=\"#分类\">#</a> 分类</h2>\n<h3 id=\"子分类\"><a class=\"anchor\" href=\"#子分类\">#</a> 子分类</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">categories:</span>  </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">Sports</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">Baseball</span> </span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\"><span class=\"attr\">categories:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> [<span class=\"string\">Sports</span>, <span class=\"string\">Baseball</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"多个分类\"><a class=\"anchor\" href=\"#多个分类\">#</a> 多个分类</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">categories:</span>  </span><br><span class=\"line\">  <span class=\"bullet\">-</span> [<span class=\"string\">Sports</span>]  </span><br><span class=\"line\">  <span class=\"bullet\">-</span> [<span class=\"string\">Play</span>]</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\"><span class=\"attr\">categories:</span>  </span><br><span class=\"line\">  <span class=\"bullet\">-</span> [<span class=\"string\">Sports</span>, <span class=\"string\">Baseball</span>]</span><br><span class=\"line\">  <span class=\"bullet\">-</span> [<span class=\"string\">Play</span>]</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "blog"
            ]
        },
        {
            "id": "https://blog.onlydoit.fun/2024/08/03/how-to-build-a-site-with-hexo/",
            "url": "https://blog.onlydoit.fun/2024/08/03/how-to-build-a-site-with-hexo/",
            "title": "使用 Hexo 搭建网站，并部署至github",
            "date_published": "2024-08-03T16:41:10.000Z",
            "content_html": "<h2 id=\"环境准备\"><a class=\"anchor\" href=\"#环境准备\">#</a> 环境准备</h2>\n<blockquote>\n<p>以 ubuntu 为例</p>\n</blockquote>\n<p>确保系统环境是最新的，并安装必要的软件：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 更新软件包列表并升级已安装的软件包</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt update &amp;&amp; <span class=\"built_in\">sudo</span> apt upgrade -y</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装 Git 和 npm，如果不使用 Git 可以省略</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt install git npm -y</span><br></pre></td></tr></table></figure>\n<p>创建并初始化 Hexo 博客：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建一个名为 blogsTest 的目录，可以选择其他名字</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> ~/blogsTest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进入创建的目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~/blogsTest/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 全局安装 Hexo 命令行工具</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> npm install hexo-cli -g</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 初始化一个名为 myblog 的 Hexo 博客，可以选择其他名字</span></span><br><span class=\"line\">hexo init myblog</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进入初始化的博客目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> myblog</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装 Hexo 部署插件</span></span><br><span class=\"line\">npm install hexo-deployer-git --save</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装 Hexo 项目所需的所有依赖包</span></span><br><span class=\"line\">npm install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 清理 Hexo 缓存文件，生成静态文件并启动本地服务器</span></span><br><span class=\"line\">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 此时可以通过浏览器访问服务器的 IP:4000 来查看博客效果</span></span><br></pre></td></tr></table></figure>\n<p>项目目录结构及文件解释</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node_modules  <span class=\"comment\"># 存放项目所需的所有依赖包，通过 npm 安装的</span></span><br><span class=\"line\">public        <span class=\"comment\"># 生成的静态文件会存放在这个目录，部署时会使用到</span></span><br><span class=\"line\">scaffolds     <span class=\"comment\"># 用于定义新文章、页面等内容的模板</span></span><br><span class=\"line\"><span class=\"built_in\">source</span>        <span class=\"comment\"># 存放源文件的地方，主要包括 Markdown 文件和资源文件</span></span><br><span class=\"line\">themes        <span class=\"comment\"># 用于存放 Hexo 博客的主题，可以自定义或下载其他主题</span></span><br><span class=\"line\">_config.yml   <span class=\"comment\"># Hexo 的全局配置文件，包含站点配置、插件配置等信息</span></span><br><span class=\"line\">db.json       <span class=\"comment\"># 存储 Hexo 解析源文件后的数据，用于生成页面</span></span><br><span class=\"line\">package.json  <span class=\"comment\"># 项目的配置文件，记录项目所需的依赖包和项目信息</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"一键部署到github\"><a class=\"anchor\" href=\"#一键部署到github\">#</a> 一键部署到 github</h2>\n<h3 id=\"1-创建-github-仓库\"><a class=\"anchor\" href=\"#1-创建-github-仓库\">#</a> 1. 创建 GitHub 仓库</h3>\n<p>在 GitHub 上新建一个仓库存放博客文件：</p>\n<ol>\n<li>前往 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29t\">GitHub</span> 并登录。</li>\n<li>点击  <code>+</code>  并选择  <code>New repository</code> 。</li>\n<li><code>Repository name</code>  建议设置为  <code>&lt;yourUserName&gt;.github.io</code> 。</li>\n<li>其他配置保持默认，点击  <code>Create repository</code> 。</li>\n<li>在新建的项目设置中  <code>Settings -&gt; Pages</code>  中将  <code>Branch</code>  改为  <code>main</code>  并点击  <code>Save</code> 。</li>\n</ol>\n<h3 id=\"2-生成-ssh-密钥\"><a class=\"anchor\" href=\"#2-生成-ssh-密钥\">#</a> 2. 生成 SSH 密钥</h3>\n<p>生成 SSH 密钥，以便将代码推送到 GitHub：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入 SSH 配置目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~/.ssh/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置 Git 的全局用户名</span></span><br><span class=\"line\">git config --global user.name <span class=\"string\">&quot;&lt;yourUserName&gt;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置 Git 的全局邮箱</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">&quot;&lt;yourEmail&gt;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成 SSH 密钥对，并指定文件名为 hexo-deploy-key，邮箱作为注释</span></span><br><span class=\"line\">ssh-keygen -t rsa -f hexo-deploy-key -C <span class=\"string\">&quot;&lt;yourEmail&gt;&quot;</span>  <span class=\"comment\"># 记得将公钥(.pub)提交到 GitHub</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-添加-ssh-公钥到-github\"><a class=\"anchor\" href=\"#3-添加-ssh-公钥到-github\">#</a> 3. 添加 SSH 公钥到 GitHub</h3>\n<ol>\n<li>在 GitHub 中点击  <code>Settings</code>  -&gt;  <code>SSH and GPG keys</code>  -&gt;  <code>New SSH Key</code> 。</li>\n<li><code>Title</code>  随意， <code>Key</code>  复制  <code>hexo-deploy-key.pub</code>  中的内容。</li>\n</ol>\n<h3 id=\"4-确认-ssh-连接\"><a class=\"anchor\" href=\"#4-确认-ssh-连接\">#</a> 4. 确认 SSH 连接</h3>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 确认是否成功连接到 GitHub</span></span><br><span class=\"line\">ssh -T git@github.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># 如果运行完上面的命令没有出现类似以下信息：</span></span><br><span class=\"line\"><span class=\"comment\"># Hi &lt;yourUserName&gt;! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br><span class=\"line\"><span class=\"comment\"># 可以尝试以下步骤指定 SSH 密钥：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动 SSH agent</span></span><br><span class=\"line\"><span class=\"built_in\">eval</span> <span class=\"string\">&quot;<span class=\"subst\">$(ssh-agent -s)</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加生成的私钥到 SSH agent</span></span><br><span class=\"line\">ssh-add ~/.ssh/hexo-deploy-key  <span class=\"comment\"># 请替换为你的密钥路径</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 再次确认是否成功连接到 GitHub</span></span><br><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-指定github仓库\"><a class=\"anchor\" href=\"#5-指定github仓库\">#</a> 5. 指定 github 仓库</h3>\n<p>修改  <code>_config.yml</code>  文件：</p>\n<blockquote>\n<p><code>url</code>  和  <code>repo</code>  中的  <code>&lt;yourUserName&gt;</code>  应替换为实际的 GitHub 用户名。</p>\n<p><code>branch</code>  的值  <code>main</code>  应与实际 GitHub 仓库的默认分支名一致（通常为  <code>main</code>  或  <code>master</code> ）。</p>\n</blockquote>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改 url</span></span><br><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"string\">https://&lt;yourUserName&gt;.github.io</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改 repo 和 branch</span></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">git@github.com:&lt;yourUserName&gt;/&lt;yourUserName&gt;.github.io.git</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">main</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"6-部署命令\"><a class=\"anchor\" href=\"#6-部署命令\">#</a> 6. 部署命令</h3>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 清理 Hexo 生成的临时文件和缓存</span></span><br><span class=\"line\">hexo clean</span><br><span class=\"line\"><span class=\"comment\"># 生成静态文件</span></span><br><span class=\"line\">hexo g</span><br><span class=\"line\"><span class=\"comment\"># 测试效果</span></span><br><span class=\"line\">hexo s</span><br><span class=\"line\"><span class=\"comment\"># 发布</span></span><br><span class=\"line\">hexo d</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 一键部署</span></span><br><span class=\"line\">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>\n<h2 id=\"github-actions自动化部署-hexo博客\"><a class=\"anchor\" href=\"#github-actions自动化部署-hexo博客\">#</a> Github Actions 自动化部署 Hexo 博客</h2>\n<blockquote>\n<p>将本地部署博客的内容交给 GitHub Actions 执行，使修改或增加博文更加便捷。</p>\n</blockquote>\n<h3 id=\"1-创建私有仓库\"><a class=\"anchor\" href=\"#1-创建私有仓库\">#</a> 1. 创建私有仓库</h3>\n<p>新建一个私有仓库，仓库名可随意，这里以  <code>myblog</code>  为例。</p>\n<p>此时你会有两个仓库：</p>\n<ul>\n<li>公有仓库：已编译的  <code>&lt;yourUserName&gt;.github.io</code></li>\n<li>私有仓库：未编译的  <code>myblog</code></li>\n</ul>\n<h3 id=\"2-获取-github-token\"><a class=\"anchor\" href=\"#2-获取-github-token\">#</a> 2. 获取 GitHub Token</h3>\n<ol>\n<li>前往 GitHub 设置： <code>Settings -&gt; Developer settings -&gt; Personal access tokens -&gt; Tokens (classic) -&gt; Generate new token -&gt; Generate new token (classic)</code></li>\n<li>将  <code>Expiration</code>  修改为  <code>No expiration</code> （永不过期）。</li>\n<li>勾选  <code>repo</code>  权限。</li>\n<li>点击生成并复制生成的 Token（只会出现一次）。</li>\n</ol>\n<h3 id=\"3-设置-github-token\"><a class=\"anchor\" href=\"#3-设置-github-token\">#</a> 3. 设置 GitHub Token</h3>\n<ol>\n<li>打开  <code>myblog</code>  仓库的  <code>Settings -&gt; Secrets and variables -&gt; Actions -&gt; New repository secret</code> 。</li>\n<li><code>Name</code>  为  <code>GITHUBTOKEN</code> ， <code>Secret</code>  为刚刚创建的 Token。</li>\n</ol>\n<h3 id=\"4-添加-workflows\"><a class=\"anchor\" href=\"#4-添加-workflows\">#</a> 4. 添加 Workflows</h3>\n<ol>\n<li>\n<p>新建一个文件夹  <code>.github/workflows/</code> 。</p>\n</li>\n<li>\n<p>在该文件夹下新建一个文件  <code>deploy.yml</code> 。</p>\n<blockquote>\n<p>确保  <code>&lt;yourUserName&gt;</code>  替换为实际的 GitHub 用户名。</p>\n<p><code>env</code>  中  <code>PERSONAL_TOKEN</code>  的值应为 GitHub Token 的名称，与设置的 secret 名称一致（此处  <code>GITHUBTOKEN</code> ）。</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Deploying</span> <span class=\"string\">Hexo</span> <span class=\"string\">project</span> <span class=\"string\">to</span> <span class=\"string\">GitHub</span> <span class=\"string\">Pages</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">main</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">build-and-deploy:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v3</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">fetch-depth:</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Build</span> <span class=\"string\">and</span> <span class=\"string\">Deploy</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">theme-keep/hexo-deploy-github-pages-action@master</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">PERSONAL_TOKEN:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.GITHUBTOKEN</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">PUBLISH_REPOSITORY:</span> <span class=\"string\">&lt;yourUserName&gt;/&lt;yourUserName&gt;.github.io</span></span><br><span class=\"line\">          <span class=\"attr\">BRANCH:</span> <span class=\"string\">main</span></span><br><span class=\"line\">          <span class=\"attr\">PUBLISH_DIR:</span> <span class=\"string\">./public</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"5-将源码上传到私有仓库\"><a class=\"anchor\" href=\"#5-将源码上传到私有仓库\">#</a> 5. 将源码上传到私有仓库</h3>\n<blockquote>\n<p>确保  <code>&lt;yourUserName&gt;</code>  替换为实际的 GitHub 用户名。</p>\n<p><code>git remote add origin</code>  中的  <code>&lt;yourUserName&gt;</code>  和仓库名  <code>myblog</code>  应根据实际情况调整。</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 初始化 Git 仓库</span></span><br><span class=\"line\">git init</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加当前目录文件到缓存区</span></span><br><span class=\"line\">git add .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交缓存区内容到本地库，并备注 &quot;first commit&quot;</span></span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;first commit&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 利用 SSH 关联远程仓库</span></span><br><span class=\"line\">git remote add origin git@github.com:&lt;yourUserName&gt;/myblog.git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将本地库的所有内容推送到远程库</span></span><br><span class=\"line\">git push -u origin main</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "blog",
                "搭建网站"
            ]
        }
    ]
}